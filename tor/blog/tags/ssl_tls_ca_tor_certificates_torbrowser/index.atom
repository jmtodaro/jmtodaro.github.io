<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged ssl_tls_ca_tor_certificates_torbrowser</title>
<link href="http://localhost/jmtodaro/tor/blog/tags/ssl_tls_ca_tor_certificates_torbrowser/"/>
<link href="http://localhost/jmtodaro/tor/blog/tags/ssl_tls_ca_tor_certificates_torbrowser/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>The Tor Blog</name>

</author>




<id>http://localhost/jmtodaro/tor/blog/tags/ssl_tls_ca_tor_certificates_torbrowser/</id>

<subtitle type="html">The Tor Blog</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20100722ubuntu1">ikiwiki</generator>
<updated>2011-04-05T12:15:50Z</updated>
<entry>
	<title>Detecting Certificate Authority compromises and web browser collusion</title>

	<id>http://localhost/jmtodaro/tor/blog/posts/Detecting_Certificate_Authority_compromises_and_web_browser_collusion/</id>

	<link href="http://localhost/jmtodaro/tor/blog/posts/Detecting_Certificate_Authority_compromises_and_web_browser_collusion/"/>

	<author><name>ioerror</name></author>






	<category term="/tags/ssl_tls_ca_tor_certificates_torbrowser" />


	<updated>2011-04-05T12:15:50Z</updated>
	<published>2011-03-23T00:16:10Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;&lt;small&gt;&lt;i&gt;Thanks to Ian Gallagher, Seth Schoen, Jesse Burns, Chris Palmer, and other anonymous birds for their invaluable feedback on this writeup.&lt;/i&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The Tor Project has long understood that the &lt;a href=&quot;https://secure.wikimedia.org/wikipedia/en/wiki/Certificate_authority&quot;&gt;certification authority&lt;/a&gt; (CA) model of trust on the internet is susceptible to various methods of compromise. Without strong anonymity, the ability to perform targeted attacks with the blessing of a CA key is serious. In the past, I’ve worked on &lt;a href=&quot;http://www.win.tue.nl/hashclash/rogue-ca/&quot;&gt;attacks relating to SSL/TLS trust models&lt;/a&gt; and for quite some time, I’ve hunted for evidence of non-academic CA compromise in the wild.&lt;/p&gt;

&lt;p&gt;I’ve also looked for special kinds of cooperation between CAs and browsers. Proof of collusion will give us facts. It will also give us a real understanding of the faith placed in the strength of the underlying systems.&lt;/p&gt;

&lt;p&gt;Does certificate revocation really work? &lt;a href=&quot;http://www.imperialviolet.org/2011/03/18/revocation.html&quot;&gt;&lt;b&gt;No, it does not&lt;/b&gt;&lt;/a&gt;. How much faith does a vendor actually put into revocation, when verifiable evidence of malice is detected or known? Not much, and that’s the subject of this writing.&lt;/p&gt;

&lt;p&gt;Last week, a smoking gun came into sight: A Certification Authority appeared to be compromised in some capacity, and the attacker issued themselves valid HTTPS certificates for high-value web sites. With these certificates, the attacker could impersonate the identities of the victim web sites or other related systems, probably undetectably for the majority of users on the internet.&lt;/p&gt;

&lt;p&gt;I watch the Chromium and Mozilla Firefox projects carefully, because they are so important to the internet infrastructure. On the evening of 16 March, I noticed a very interesting code change to Chromium: &lt;a href=&quot;http://src.chromium.org/viewvc/chrome/trunk/src/net/base/x509_certificate.cc?view=markup&amp;amp;pathrev=78478&quot;&gt;revision 78478, Thu Mar 17 00:48:21 2011 UTC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this revision, the developers added X509Certificate::IsBlacklisted, which returns true if a HTTPS certificate has one of these particular serial numbers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;047ecbe9fca55f7bd09eae36e10cae1e
&lt;li&gt;d8f35f4eb7872b2dab0692e315382fb0
&lt;li&gt;b0b7133ed096f9b56fae91c874bd3ac0
&lt;li&gt;9239d5348f40d1695a745470e1f23f43
&lt;li&gt;d7558fdaf5f1105bb213282b707729a3
&lt;li&gt;f5c86af36162f13a64f54f6dc9587c06
&lt;/ul&gt;

&lt;p&gt;A comment marks the first as &quot;Not a real certificate. For testing only.&quot; but we don’t know if this means the other certificates are or are not also for testing.&lt;/p&gt;

&lt;p&gt;With just these serial numbers, we are not able to learn much about the certificates that Chromium now blocks. To get more information, I started the &lt;a href=&quot;https://github.com/ioerror/crlwatch&quot;&gt;crlwatch&lt;/a&gt; project. Nearly every certificate contains a reference to a &lt;a href=&quot;https://secure.wikimedia.org/wikipedia/en/wiki/Revocation_list&quot;&gt;Certificate Revocation List&lt;/a&gt; (CRL). A CRL is a list of certificates that the CA has revoked for whatever reason. In theory, this means that an attacker is unable to tamper with the certificate to prevent revocation as the browser will check the CRL it finds in a certificate. In practice the attacker simply needs to tamper with the network - this is something they’re already able to do if they are performing a SSL/TLS Machine-In-The-Middle attack. Even if an attacker has a certificate, they generally are unable to modify the certificate without breaking the digital signature issued by the CA. That CA signature is what gives the certificate value to an attacker and tampering takes the attacker back to square zero. So while investigating these serials, we clearly lack the CRL distribution point in the Chrome source. However, the project that I announced on March 17th, crlwatch, was specifically written to assist in finding who issued, and potentially revoked the serial numbers in question. By matching the serial numbers found in the source for Chrome with the serial numbers of revoked certificates, we’re able to link specific serials to specific CA issuers. The more serial numbers we match in revocation lists, the higher our probability of having found the CA that issued the certificates.&lt;/p&gt;

&lt;p&gt;About twelve hours (Thursday, March 17, 2011 | 13:00) after the above patch was pushed into source control - Google announced &lt;a href=&quot;http://googlechromereleases.blogspot.com/2011/03/stable-and-beta-channel-updates_17.html&quot;&gt;an important Chrome Update that involved HTTPS certificate issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This also is mostly uninteresting until we notice that this is not isolated to Google. Mozilla pushed out two patches of interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hg.mozilla.org/mozilla-central/rev/f6215eef2276&quot;&gt;rev-f6215eef2276&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;http://hg.mozilla.org/mozilla-central/rev/55f344578932&quot;&gt;rev-55f344578932&lt;/a&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;http://hg.mozilla.org/mozilla-central/rev/f6215eef2276&quot;&gt;complete changeset&lt;/a&gt; is semi-informative. Mozilla references a private bug in that fix that Mozilla will hopefully disclose. Similar to Chromium, the Mozilla patches create a list of certificate serial numbers that will be treated as invalid. However, the serial numbers from the Mozilla patches are different:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;009239d5348f40d1695a745470e1f23f43
&lt;li&gt;00d8f35f4eb7872b2dab0692e315382fb0
&lt;li&gt;72032105c50c08573d8ea5304efee8b0
&lt;li&gt;00b0b7133ed096f9b56fae91c874bd3ac0
&lt;li&gt;00e9028b9578e415dc1a710a2b88154447
&lt;li&gt;00d7558fdaf5f1105bb213282b707729a3
&lt;li&gt;047ecbe9fca55f7bd09eae36e10cae1e
&lt;li&gt;00f5c86af36162f13a64f54f6dc9587c06
&lt;li&gt;392a434f0e07df1f8aa305de34e0c229
&lt;li&gt;3e75ced46b693021218830ae86a82a71
&lt;/ul&gt;

&lt;p&gt;Thus, both Mozilla and Google shipped similar patches to their code at roughly the same time. The two browsers now have partially overlapping certificate blocklists. Here is the union of the two lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;009239d5348f40d1695a745470e1f23f43
&lt;li&gt;00b0b7133ed096f9b56fae91c874bd3ac0
&lt;li&gt;00d7558fdaf5f1105bb213282b707729a3
&lt;li&gt;00d8f35f4eb7872b2dab0692e315382fb0
&lt;li&gt;00e9028b9578e415dc1a710a2b88154447
&lt;li&gt;00f5c86af36162f13a64f54f6dc9587c06
&lt;li&gt;047ecbe9fca55f7bd09eae36e10cae1e
&lt;li&gt;392a434f0e07df1f8aa305de34e0c229
&lt;li&gt;3e75ced46b693021218830ae86a82a71
&lt;li&gt;72032105c50c08573d8ea5304efee8b0
&lt;li&gt;9239d5348f40d1695a745470e1f23f43
&lt;li&gt;b0b7133ed096f9b56fae91c874bd3ac0
&lt;li&gt;d7558fdaf5f1105bb213282b707729a3
&lt;li&gt;d8f35f4eb7872b2dab0692e315382fb0
&lt;li&gt;f5c86af36162f13a64f54f6dc9587c06
&lt;/ul&gt;

&lt;p&gt;Why do the browsers have these blocklists, and why don’t they have the same blocklists?&lt;/p&gt;

&lt;p&gt;This returns me to the reason for creating crlwatch last week - I wanted to find the someones who knowingly revoked the above listed special certificates. Anyone looking from the same starting point as I did, obviously lacks the leaf certificates in question and as a result, I had to look in a rather round about manner. Thanks to the &lt;a href=&quot;https://www.eff.org/observatory&quot;&gt;EFF’s SSL Observatory&lt;/a&gt;, I was able to populate the base list for crlwatch. Armed with a nearly canonical list of all CRLs, I fetched them over &lt;a href=&quot;https://www.torproject.org/&quot;&gt;Tor&lt;/a&gt; and parsed the CRL data into human readable text. The goal was to search for the above serial numbers and to find something linkable.&lt;/p&gt;

&lt;p&gt;This is the result from searching the crlwatch data:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br /&gt;
Looking for 009239d5348f40d1695a745470e1f23f43 in parsed CRLs...&lt;br /&gt;
Looking for 00b0b7133ed096f9b56fae91c874bd3ac0 in parsed CRLs...&lt;br /&gt;
Looking for 00d7558fdaf5f1105bb213282b707729a3 in parsed CRLs...&lt;br /&gt;
Looking for 00d8f35f4eb7872b2dab0692e315382fb0 in parsed CRLs...&lt;br /&gt;
Looking for 00e9028b9578e415dc1a710a2b88154447 in parsed CRLs...&lt;br /&gt;
Looking for 00f5c86af36162f13a64f54f6dc9587c06 in parsed CRLs...&lt;br /&gt;
Looking for 047ecbe9fca55f7bd09eae36e10cae1e in parsed CRLs...&lt;br /&gt;
Match! Serial Number: 047ECBE9FCA55F7BD09EAE36E10CAE1E&lt;br /&gt;
Match! Serial Number: 047ECBE9FCA55F7BD09EAE36E10CAE1E&lt;br /&gt;
Match! Serial Number: 047ECBE9FCA55F7BD09EAE36E10CAE1E&lt;br /&gt;
Looking for 392a434f0e07df1f8aa305de34e0c229 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: 392A434F0E07DF1F8AA305DE34E0C229&lt;br /&gt;
Match! Serial Number: 392A434F0E07DF1F8AA305DE34E0C229&lt;br /&gt;
Match! Serial Number: 392A434F0E07DF1F8AA305DE34E0C229&lt;br /&gt;
Looking for 3e75ced46b693021218830ae86a82a71 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: 3E75CED46B693021218830AE86A82A71&lt;br /&gt;
Match! Serial Number: 3E75CED46B693021218830AE86A82A71&lt;br /&gt;
Match! Serial Number: 3E75CED46B693021218830AE86A82A71&lt;br /&gt;
Looking for 72032105c50c08573d8ea5304efee8b0 in parsed CRLs...&lt;br /&gt;
Looking for 9239d5348f40d1695a745470e1f23f43 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: 9239D5348F40D1695A745470E1F23F43&lt;br /&gt;
Match! Serial Number: 9239D5348F40D1695A745470E1F23F43&lt;br /&gt;
Match! Serial Number: 9239D5348F40D1695A745470E1F23F43&lt;br /&gt;
Looking for b0b7133ed096f9b56fae91c874bd3ac0 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: B0B7133ED096F9B56FAE91C874BD3AC0&lt;br /&gt;
Match! Serial Number: B0B7133ED096F9B56FAE91C874BD3AC0&lt;br /&gt;
Match! Serial Number: B0B7133ED096F9B56FAE91C874BD3AC0&lt;br /&gt;
Looking for d7558fdaf5f1105bb213282b707729a3 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: D7558FDAF5F1105BB213282B707729A3&lt;br /&gt;
Match! Serial Number: D7558FDAF5F1105BB213282B707729A3&lt;br /&gt;
Match! Serial Number: D7558FDAF5F1105BB213282B707729A3&lt;br /&gt;
Looking for d8f35f4eb7872b2dab0692e315382fb0 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: D8F35F4EB7872B2DAB0692E315382FB0&lt;br /&gt;
Match! Serial Number: D8F35F4EB7872B2DAB0692E315382FB0&lt;br /&gt;
Match! Serial Number: D8F35F4EB7872B2DAB0692E315382FB0&lt;br /&gt;
Looking for f5c86af36162f13a64f54f6dc9587c06 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: F5C86AF36162F13A64F54F6DC9587C06&lt;br /&gt;
Match! Serial Number: F5C86AF36162F13A64F54F6DC9587C06&lt;br /&gt;
Match! Serial Number: F5C86AF36162F13A64F54F6DC9587C06&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Huzzah! It appears that we&#39;ve found a few matches!&lt;/p&gt;

&lt;p&gt;Here are the three matching files in human readable format:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ioerror/crlwatch/blob/master/crl-parsed/2208d196b567691ff77bee6ed97ac6aea7825aa0.crl2txt&quot;&gt;7825aa0.crl2txt&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ioerror/crlwatch/blob/master/crl-parsed/2454652aa76e0dcf0c7531a2ed9dbeda5c0f5dd5.crl2txt&quot;&gt;c0f5dd5.crl2txt&lt;/a&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ioerror/crlwatch/blob/master/crl-parsed/5a65d440090271759080e6d0eaae0b6ccae2ff50.crl2txt&quot;&gt;ae2ff50.crl2txt&lt;/a&gt;
&lt;/ul&gt;

&lt;p&gt;Matching entries in the list look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br /&gt;
    Serial Number: 392A434F0E07DF1F8AA305DE34E0C229&lt;br /&gt;
        Revocation Date: Mar 15 20:15:38 2011 GMT&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An interesting note is that this date is a bit earlier than the above patches. The CA knew to revoke it on March 15th and the above patches were worked into software a few days later. If the attacker was targeting specific users, the damage to those users may have already been inflicted.&lt;/p&gt;

&lt;p&gt;All three of the CRLs in question belong to &lt;a href=&quot;http://www.usertrust.com/about.html&quot;&gt;the same CA&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br /&gt;
issuer=/C=US/ST=UT/L=Salt Lake City/O=The USERTRUST&lt;br /&gt;
Network/OU=http://www.usertrust.com/CN=UTN-USERFirst-Hardware&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This appears to be a reseller or something similar for the &lt;a href=&quot;http://www.comodo.com/&quot;&gt;Comodo CA company&lt;/a&gt; when the trust chain for USERTRUST is inspected:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br /&gt;
CN = COMODO High Assurance Secure Server CA&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We appear to have no initial matches for the following Mozilla specific serials from the data that I gathered during the initial crlwatch data population run:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;009239d5348f40d1695a745470e1f23f43
&lt;li&gt;00b0b7133ed096f9b56fae91c874bd3ac0
&lt;li&gt;00d7558fdaf5f1105bb213282b707729a3
&lt;li&gt;00d8f35f4eb7872b2dab0692e315382fb0
&lt;li&gt;00e9028b9578e415dc1a710a2b88154447
&lt;li&gt;00f5c86af36162f13a64f54f6dc9587c06
&lt;/ul&gt;

&lt;p&gt;Those serial numbers appear to not match, right? Nope. Mozilla appears&lt;br /&gt;
to deal with certificate serial numbers in a slightly different manner - Chrome does the same internally but Mozilla exposes a weird quirk of certificate encoding directly in the source. The human readable data does not contain this quirk. Thus if you remove the prefix of ‘00’ from those serial numbers and search for the sixteen byte values, we find what we&#39;d expect:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br /&gt;
Looking for 9239d5348f40d1695a745470e1f23f43 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: 9239D5348F40D1695A745470E1F23F43&lt;br /&gt;
Match! Serial Number: 9239D5348F40D1695A745470E1F23F43&lt;br /&gt;
Match! Serial Number: 9239D5348F40D1695A745470E1F23F43&lt;br /&gt;
Looking for b0b7133ed096f9b56fae91c874bd3ac0 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: B0B7133ED096F9B56FAE91C874BD3AC0&lt;br /&gt;
Match! Serial Number: B0B7133ED096F9B56FAE91C874BD3AC0&lt;br /&gt;
Match! Serial Number: B0B7133ED096F9B56FAE91C874BD3AC0&lt;br /&gt;
Looking for d7558fdaf5f1105bb213282b707729a3 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: D7558FDAF5F1105BB213282B707729A3&lt;br /&gt;
Match! Serial Number: D7558FDAF5F1105BB213282B707729A3&lt;br /&gt;
Match! Serial Number: D7558FDAF5F1105BB213282B707729A3&lt;br /&gt;
Looking for d8f35f4eb7872b2dab0692e315382fb0 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: D8F35F4EB7872B2DAB0692E315382FB0&lt;br /&gt;
Match! Serial Number: D8F35F4EB7872B2DAB0692E315382FB0&lt;br /&gt;
Match! Serial Number: D8F35F4EB7872B2DAB0692E315382FB0&lt;br /&gt;
Looking for e9028b9578e415dc1a710a2b88154447 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: E9028B9578E415DC1A710A2B88154447&lt;br /&gt;
Match! Serial Number: E9028B9578E415DC1A710A2B88154447&lt;br /&gt;
Match! Serial Number: E9028B9578E415DC1A710A2B88154447&lt;br /&gt;
Looking for f5c86af36162f13a64f54f6dc9587c06 in parsed CRLs...&lt;br /&gt;
Match! Serial Number: F5C86AF36162F13A64F54F6DC9587C06&lt;br /&gt;
Match! Serial Number: F5C86AF36162F13A64F54F6DC9587C06&lt;br /&gt;
Match! Serial Number: F5C86AF36162F13A64F54F6DC9587C06&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here&#39;s sample from one of those CRLs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br /&gt;
    Serial Number: D7558FDAF5F1105BB213282B707729A3&lt;br /&gt;
        Revocation Date: Mar 15 20:15:26 2011 GMT&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ironically, after all of this work, the Mozilla &lt;a href=&quot;http://hg.mozilla.org/mozilla-central/rev/f6215eef2276#l1.57&quot;&gt;patch also leaks the CA name&lt;/a&gt; and confirmed my suspicions without question.&lt;/p&gt;

&lt;p&gt;In the end, when the lists are merged, we find eleven certificates with two certificates probably acting as testing certificates for the two vendors involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;077a59bcd53459601ca6907267a6dd1c
&lt;li&gt;047ecbe9fca55f7bd09eae36e10cae1e
&lt;li&gt;392a434f0e07df1f8aa305de34e0c229
&lt;li&gt;3e75ced46b693021218830ae86a82a71
&lt;li&gt;72032105c50c08573d8ea5304efee8b0
&lt;li&gt;9239d5348f40d1695a745470e1f23f43
&lt;li&gt;b0b7133ed096f9b56fae91c874bd3ac0
&lt;li&gt;d7558fdaf5f1105bb213282b707729a3
&lt;li&gt;d8f35f4eb7872b2dab0692e315382fb0
&lt;li&gt;e9028b9578e415dc1a710a2b88154447
&lt;li&gt;f5c86af36162f13a64f54f6dc9587c06
&lt;/ul&gt;

&lt;p&gt;This is evidence of a rather serious event and one that cannot be ignored. If I had to make a bet, I&#39;d wager that an attacker was able to issue high value certificates, probably by compromising USERTRUST in some manner, this was discovered sometime before the revocation date, each certificate was revoked, the vendors notified, the patches were written, and binary builds kicked off - end users are probably still updating and thus many people are vulnerable to the failure that is the CRL and OCSP method for revocation. Even after users update, I&#39;m guessing they may be unequally protected.  Mozilla and other browsers should force OCSP verification by default as part of their next release and remove CAs that are unable to handle this requirement. Users of Mozilla Firefox that are concerned about this issue should enable security.OCSP.require in the about:config dialog. The surveillance concerns of enabling OCSP are serious - a CA learns what sites you’re visiting. However, they are nullified by the fact that OCSP checking is enabled by default on Firefox at least; it simply doesn’t provide any security gains for the end user because when it fails, it fails open!&lt;/p&gt;

&lt;p&gt;I contacted both Google and Mozilla (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=643056&quot;&gt;bug #643056&lt;/a&gt;) for comment after discovering the above data. Mozilla expressed some concern about disclosure and I offered to embargo this document until Tuesday March 22nd, the launch day for Firefox 4. They agreed and I kept this under my hat. After discussions between Comodo and Microsoft, passed on to me by Mozilla, the embargo was to be extended until Wednesday, March 23rd. This extension was ostensibly to ensure that Microsoft would be able to ship their Internet Explorer mitigation pack. After further discussion, Mozilla &lt;a href=&quot;https://blog.mozilla.com/security/2011/03/22/firefox-blocking-fraudulent-certificates/&quot;&gt;pushed their blog post about the issue&lt;/a&gt; and I now consider the embargo lifted. Google has already shipped a fix to users. Install the latest Firefox to get a patch, if you haven&#39;t already. A Tor Browser update is in the works and will be available soon.&lt;/p&gt;

&lt;p&gt;Mozilla offered some additional information and disclosed that &lt;a href=&quot;https://addons.mozilla.org/&quot;&gt;addons.mozilla.org&lt;/a&gt; was one of the certificates acquired by the attacker. In total, nine certificates were acquired. Seven were uniquely named. Two of the certificates were re-issued for a previously issued host name. One certificate was issued for &quot;global trustee&quot; rather than a valid host name. With testing certificates in the list, we have a good accounting of the certificates found in the source code of each browser. Google clarified their discrepancy with the list, acknowledged the duplicate serial mistake and issued subsequent patches. Saving for test hosts, the lists are now identical.&lt;/p&gt;

&lt;p&gt;If I had to guess at sites, I&#39;d speculate that Facebook, Skype, Google, Microsoft, Mozilla, and others are worthy of targeting. Comodo should disclose this information and clear up this speculation with very clear information about who was targeted.&lt;/p&gt;

&lt;p&gt;Both vendors expressed that the CA in question had done something quite remarkable by disclosing this compromise. The incentives may not be in the favor of the CA for disclosure. Many CAs may fall to similar attacks and simply refuse to disclose. Hopefully crlwatch will provide us with meaningful data regarding revocation events. The EFF and The Tor Project are &lt;a href=&quot;https://trac.torproject.org/projects/tor/wiki/HTTPSEverywhere/SSLObservatorySubmission&quot;&gt;working on solutions for detecting anomalies in certificates&lt;/a&gt; found in the wild. Still, some CAs may simply be unaware of compromises or unwilling to revoke for fear of detection.&lt;/p&gt;

&lt;p&gt;Are all other browsers deploying similar countermeasures? Thanks to the free software nature of Firefox and Chrome, we have an answer for at least two projects. I wish that we could say the same for the rest of the browser world. One may assume that the CA in question did their best to contact all impacted vendors and targets.&lt;/p&gt;

&lt;p&gt;Comodo has not yet revealed the extent of the compromise to the public - were their signing keys in a hardware security module? How many certificates in total were ever issued by this specific signing key? Wouldn&#39;t it be best to remove the specific signing keys from all trust roots to be extra careful given the stakes? Who exactly did they deem important enough for disclosure? The Tor Project, which ships the Tor Browser Bundle was not notified. Clearly some groups are being left out of the loop and this is where even a single attack really causes the entire CA trust model to fall apart.&lt;/p&gt;

&lt;p&gt;Comodo should release the full certificates to the internet as well as all of the details relating to the attack. Mozilla and other browsers should open their bug reports, explain their process and lay out a path forward where we won&#39;t have to repeat this entire process again.&lt;/p&gt;

&lt;p&gt;There is some suspicion that this action was taken by a state level adversary and there are some specific states that have been named. I’ll leave further speculation about which nation states may be involved to others. The mere fact that the web’s system of trust relies on an all or nothing property should be enough of a cause for alarm. It’s obvious that this has been and will continue to be exploited.&lt;/p&gt;

&lt;p&gt;The impact on other cryptographic systems, such as S/MIME signatures and other cryptographic systems secured by CAs is entirely un-discussed. Quite seriously, when a CA is compromised, it will impact a great deal more than the web; users of email systems (SMTP, IMAP, POP,etc), Jabber servers, and any other SSL/TLS enabled systems are all at risk. Blocking specific serial numbers or relying on flawed, &lt;a href=&quot;http://www.imperialviolet.org/2011/03/18/revocation.html&quot;&gt;provably broken methods of revocation&lt;/a&gt; will simply not cut it anymore. When the actual protection mechanisms are not enforced, there is little hope of end users being protected.&lt;/p&gt;

&lt;p&gt;This should serve as a wake up call to the internet. We need to research, build, and share new methods for ensuring trust, identity, authenticity, and confidentiality on the internet. Proposals such as &lt;a href=&quot;http://www.ietf.org/id/draft-ietf-dane-protocol-06.txt&quot;&gt;DANE&lt;/a&gt;, &lt;a href=&quot;http://tools.ietf.org/html/draft-hallambaker-donotissue-03&quot;&gt;CAA&lt;/a&gt;, &lt;a href=&quot;http://tools.ietf.org/html/draft-hoffman-server-has-tls-04&quot;&gt;HASTLS&lt;/a&gt;, and &lt;a href=&quot;http://web.monkeysphere.info/&quot;&gt;Monkeysphere&lt;/a&gt; are steps in the right direction but they face an uphill battle from entrenched economic interests. &lt;/p&gt;

&lt;p&gt;Certification Authorities may continue to provide a piece of the puzzle but it’s high time we ensure that they’re not the alpha and the omega, anymore.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a name=&quot;Update&quot;&gt;Update&lt;/a&gt;:&lt;/b&gt;&lt;br /&gt;
Comodo has issued &lt;a href=&quot;http://www.comodo.com/Comodo-Fraud-Incident-2011-03-23.html&quot;&gt;a statement confirming everything&lt;/a&gt; that I&#39;ve said and more. They believe that this was a targeted attack by a state level actor and they have named Iran as the country they suspect. Mozilla has now opened the bug reports about the issue to the public. Microsoft has now &lt;a href=&quot;http://www.microsoft.com/technet/security/advisory/2524375.mspx&quot;&gt;disclosed their report&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;In the details of their statement we have a confirmation that they have the ability to monitor and thus surveille people who wish to know if certificates are valid.&lt;/p&gt;

&lt;p&gt;Comodo also clearly demonstrate a mis-understanding - they believe that checks for revocation are proof positive that certificates are being used. They need to &lt;b&gt;&lt;a href=&quot;http://www.imperialviolet.org/2011/03/18/revocation.html&quot;&gt;read and understand why this is not true&lt;/a&gt;&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The browsers have dropped the ball and they have chosen to fail open in nearly every single case; an attacker who is able to MITM SSL/TLS will also MITM the OCSP/CRL requests. Moxie&#39;s &lt;a href=&quot;http://www.thoughtcrime.org/software/sslstrip/&quot;&gt;sslstrip&lt;/a&gt; demonstrated that an attacker would do this automatically and his software has done this for OCSP in public since 2009. Mozilla did not fix this issue at the time and they have once again punted on the issue. An even &lt;a href=&quot;http://www.imperialviolet.org/2011/03/18/revocation.html&quot;&gt;lower tech attack is possible and it&#39;s why revocation does not work&lt;/a&gt;: &lt;b&gt;By returning a HTTP 500 error, the browser will the continue on as if revocation checks showed the certificate to be perfectly fine&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The browsers chose a user privacy invasive stance without the user protecting security properties. They did this because they claim that CAs are unable to provide working OCSP/CRL systems for request handling. This is a fair claim if true but it must not stand any longer. If the CA cannot provide even a basic level of revocation, it&#39;s clearly &lt;b&gt;irresponsible&lt;/b&gt; to ship that CA root in a browser. &lt;b&gt;Browsers should give insecure CA keys an Internet Death Sentence&lt;/b&gt; rather than expose the users of the browsers to known problems.&lt;/p&gt;

&lt;p&gt;It&#39;s probably the case that Mozilla and other browsers should write a secure, caching OCSP server for use when a CA has a failure. It should probably be run by a neutral third party such as the EFF with a strong user privacy stance. This would only serve as a temporary fix and until Browsers get their act together, users are doomed anyway.&lt;/p&gt;

&lt;p&gt;OCSP stapling does not fix this issue. The browsers treat revocation errors as soft errors and a MITM is deadly for revocation. The browsers believe they have to treat them as soft errors because the CAs are failing to do their job properly and are almost entirely unaccountable. The browsers are failing users by refusing to hold CAs to account. If OCSP and CRL failures mean the internet doesn&#39;t work, we need to create alternatives and not simply sweep these issues under the rug for later analysis. &lt;b&gt;Browsers should hard fail on certificate revocation errors.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Comodo has further failed by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Failing to produce further information about those certificates
&lt;li&gt;Selective disclosure to &quot;&lt;i&gt;principal browsers and domain owners&lt;/i&gt;&quot;
&lt;li&gt;Failing to disclose what sub-CA/intermediate root actually did the signing
&lt;li&gt;Believing that the attacker must control DNS for these attacks to succeed
&lt;li&gt;Waiting &lt;b&gt;eight days&lt;/b&gt; to disclose evidence of a specific targeted attack
&lt;/ul&gt;

&lt;p&gt;I believe that the browsers, such as Mozilla, are doing the best that they can in some ways but the lack of immediate full disclosure is a major failure.&lt;/p&gt;

	</content>


	<link rel="comments" href="http://localhost/jmtodaro/tor/blog/posts/Detecting_Certificate_Authority_compromises_and_web_browser_collusion/#comments" type="text/html" />


	<link rel="comments" href="http://localhost/jmtodaro/tor/blog/posts/Detecting_Certificate_Authority_compromises_and_web_browser_collusion/comments.atom" type="application/atom+xml" />

</entry>

</feed>
